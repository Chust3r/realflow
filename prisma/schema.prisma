generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  rooms         Room[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Room {
  id                         String      @id @default(cuid())
  name                       String
  description                String?
  slug                       String
  createdAt                  DateTime    @default(now())
  updatedAt                  DateTime    @updatedAt
  userId                     String
  saveMessages               Boolean     @default(false)
  enableAuth                 Boolean     @default(false)
  enableWebHooks             Boolean     @default(false)
  webhookUrl                 String?
  maxSimultaneousConnections Int         @default(20)
  publicKey                  String
  secretKeys                 SecretKey[]
  blacklist                  Blacklist[]
  User                       User        @relation(fields: [userId], references: [id])
  messages                   Message[]
  metrics                    Metric[]
  requests                   Request[]

  @@unique([id, slug])
  @@map("rooms")
}

model SecretKey {
  id        String    @id @default(cuid())
  value     String
  expires   DateTime?
  roomId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  room      Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Blacklist {
  id        String   @id @default(cuid())
  host      String
  roomId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([host, roomId])
  @@map("blacklist")
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  roomId    String
  size      Int      @default(0)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Request {
  id         String   @id @default(cuid())
  origin     String
  roomId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  authorized Boolean
  latency    Float    @default(0)
  userAgent  String
  address    String
  room       Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("requests")
}

model Metric {
  id                      String   @id @default(cuid())
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  roomId                  String
  event                   String
  latency                 Int
  activeUsers             Int      @default(0)
  connections             Int      @default(0)
  simultaneousConnections Int      @default(0)
  room                    Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
}
